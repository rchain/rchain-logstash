input {
	pipeline {
		address => "nagios"
	}
}

filter {
	if [level] == "INFO" {
		if "RChain Node" in [message] {
			mutate {
				add_field => { "status" => 0 }
			}
		} else {
			drop {}
		}
	} else if [level] == "WARN" {
		if [logger_name] == "io.grpc.netty.NettyServerHandler" {
			drop {}
		} else if [logger_name] == "io.netty.handler.ssl.SslHandler" {
			drop {}
		} else if [logger_name] == "kamon.metric.AtomicHdrHistogram" {
			drop {}
		} else if [logger_name] == "coop.rchain.comm.transport.StreamObservable" and "Client stream message queue is full" in [message] {
			drop {}
		} else if "did not contain a valid CRC value" in [message] {
			drop {}
		} else if "casper instance was not available yet" in [message] {
			drop {}
		} else if "sender is empty" in [message] {
			drop {}
		} else if "has a lower sequence number than" in [message] {
			drop {}
		} else if "Ignoring block" in [message] {
			drop {}
		} else if "Failed to resolve name" in [message] {
			drop {}
		} else if "peer request timeout" in [message] {
			drop {}
		} else if "Retrying push to client stream" in [message] {
			drop {}
		} else if "Wrong network id" in [message] {
			drop {}
		} else if "Malformed response" in [message] {
			drop {}
		} else if "Received not full stream message" in [message] {
			drop {}
		} else if "Error while creating block: NoNewDeploys" in [message] {
			drop {}
		} else if "Could not retrieve requested block" in [message] {
			drop {}
		} else if "Recording invalid block" in [message] {
			drop {}
		} else if "Failure! Invalid block" in [message] {
			drop {}
		} else if "Must wait for more blocks from other validators" in [message] {
			drop {}
		} else if "Insufficient funds" in [message] {
			drop {}
		} else {
			mutate {
				add_field => { "status" => 2 }
			}
		}
	} else if [level] == "ERROR" {
		if [logger_name] == "coop.rchain.comm.transport.TransportServer" and "Protocol error" in [message] {
			drop {}
		} else if [logger_name] == "coop.rchain.comm.transport.GrpcTransportServer" {
			if "Could not restore data" in [message] {
				drop {}
			}
		} else if "Got response: message dropped" in [message] {
			drop {}
		} else if "Error while handling message. Error: Timeout" in [message] {
			drop {}
		} else if "Peer is currently unavailable" in [message] {
			drop {}
		} else if "peer request timeout" in [message] {
			drop {}
		} else if "Error while streaming packet" in [message] {
			drop {}
		} else if "Computation ran out of phlogistons" in [message] {
			drop {}
		} else if "cancelled before receiving half close" in [message] {
			drop {}
		} else if "Error in requestLoop" in [message] {
			drop {}
		} else if "Abnormal NIO1HeadStage termination" in [message] {
			drop {}
		} else if "Could not receive stream" in [message] {
			drop {}
		} else {
			mutate {
				add_field => { "status" => 2 }
			}
		}
	} else {
		drop {}
	}

	mutate {
		gsub => [
			"host", "^(testnet|devnet)\d*-(node\d+)\..*$", "\2.\1.rchain-dev.tk"
		]
	}

	mutate {
		add_field => { "nagios_output" => "%{level} %{logger_name}: %{message}" }
	}

	if [stack_trace] {
		mutate {
			add_field => { "exception_line" => "%{stack_trace}" }
		}
		mutate {
			gsub => [ "exception_line", "\n.*", "" ]
		}
		mutate {
			replace => {
				"nagios_output" => "%{nagios_output}\nException: %{exception_line}"
			}
		}
	}
}

output {
	http {
		url => "http://nagios.c.developer-222401.internal:6315/submit_result"
		http_method => "post"
		format => "json"
		mapping => {
			"host" => "%{host}"
			"service" => "errors-in-log"
			"status" => "%{status}"
			"output" => "%{nagios_output}"
		}
	}
}
